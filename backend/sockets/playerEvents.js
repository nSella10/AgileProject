import rooms from "./roomStore.js"; // ◊†◊ô◊ô◊ë◊ê ◊ê◊™ ◊î-map ◊©◊ú ◊î◊ó◊ì◊®◊ô◊ù

const availableEmojis = [
  "üê∂",
  "ü¶ä",
  "üêº",
  "üêµ",
  "üê±",
  "ü¶Å",
  "üê∏",
  "üêª",
  "ü¶Ñ",
  "üêØ",
];

export const handlePlayerEvents = (io, socket) => {
  socket.on("joinRoom", ({ roomCode, username }) => {
    console.log(`‚û°Ô∏è joinRoom from ${username}, code: ${roomCode}`);
    console.log("üìã All active rooms:", [...rooms.keys()]);

    const room = rooms.get(roomCode);

    if (!room) {
      socket.emit("roomJoinError", "Room not found");
      return;
    }

    const alreadyJoined = room.players.some((p) => p.username === username);
    if (alreadyJoined) {
      socket.emit("roomJoinError", "Username already taken");
      return;
    }

    // üé≤ ◊î◊í◊®◊ú◊™ ◊ê◊ô◊û◊ï◊í'◊ô (◊ë◊î◊™◊ê◊ù ◊ú◊û◊°◊§◊® ◊©◊ó◊ß◊†◊ô◊ù)
    const assignedEmoji =
      availableEmojis[room.players.length % availableEmojis.length];

    // ◊î◊ï◊°◊§◊™ ◊©◊ó◊ß◊ü ◊¢◊ù ◊ê◊ô◊û◊ï◊í'◊ô
    const newPlayer = {
      socketId: socket.id,
      username,
      emoji: assignedEmoji,
    };
    room.players.push(newPlayer);

    // ◊ê◊ù ◊î◊û◊©◊ó◊ß ◊õ◊ë◊® ◊î◊™◊ó◊ô◊ú, ◊î◊ï◊°◊£ ◊ê◊™ ◊î◊©◊ó◊ß◊ü ◊ú◊†◊ô◊ß◊ï◊ì ◊¢◊ù 0 ◊†◊ß◊ï◊ì◊ï◊™
    if (room.scores) {
      room.scores[username] = 0;
      console.log(`üèÜ Added ${username} to scores with 0 points`);
    }

    socket.join(roomCode);
    console.log(`‚úÖ Player ${username} joined room ${roomCode}`);
    socket.emit("roomJoined");

    // üî• ◊©◊ú◊ô◊ó◊™ ◊ê◊ô◊û◊ï◊í'◊ô ◊ú◊©◊ó◊ß◊ü
    socket.emit("playerAssignedEmoji", { emoji: assignedEmoji });

    // üß† ◊©◊ú◊ô◊ó◊™ ◊®◊©◊ô◊û◊™ ◊©◊ó◊ß◊†◊ô◊ù ◊õ◊ï◊ú◊ú ◊ê◊ô◊û◊ï◊í'◊ô◊ù ◊ú◊û◊ê◊®◊í◊ü
    io.to(room.hostSocketId).emit("updatePlayerList", {
      players: room.players.map((p) => ({
        username: p.username,
        emoji: p.emoji,
      })),
    });

    // üéÆ ◊ê◊ù ◊î◊û◊©◊ó◊ß ◊õ◊ë◊® ◊î◊™◊ó◊ô◊ú, ◊©◊ú◊ó ◊ú◊û◊©◊™◊™◊£ ◊î◊ó◊ì◊© ◊ê◊™ ◊î◊û◊¶◊ë ◊î◊†◊ï◊õ◊ó◊ô
    if (room.status === "playing") {
      console.log(`üéÆ Game already in progress, syncing player ${username}`);

      // ◊©◊ú◊ô◊ó◊™ ◊ê◊ô◊®◊ï◊¢ ◊©◊î◊û◊©◊ó◊ß ◊î◊™◊ó◊ô◊ú
      socket.emit("gameStarting");

      // ◊ê◊ù ◊ô◊© ◊°◊ô◊ë◊ï◊ë ◊§◊¢◊ô◊ú, ◊©◊ú◊ó ◊ê◊™ ◊§◊®◊ò◊ô ◊î◊°◊ô◊ë◊ï◊ë ◊î◊†◊ï◊õ◊ó◊ô
      if (
        room.currentSongIndex !== undefined &&
        room.songs &&
        room.songs[room.currentSongIndex]
      ) {
        const currentSong = room.songs[room.currentSongIndex];
        const ROUND_DURATIONS = [1000, 2000, 3000, 4000, 5000];
        const duration = ROUND_DURATIONS[room.currentRound - 1] || 3000;

        console.log(`üéµ Syncing current round for ${username}:`, {
          songIndex: room.currentSongIndex,
          round: room.currentRound,
          duration,
        });

        // ◊©◊ú◊ó ◊ê◊™ ◊§◊®◊ò◊ô ◊î◊°◊ô◊ë◊ï◊ë ◊î◊†◊ï◊õ◊ó◊ô
        socket.emit("nextRound", {
          audioUrl: currentSong.previewUrl || currentSong.audioUrl,
          duration,
          startTime: 0,
          roundNumber: room.currentRound,
          songNumber: room.currentSongIndex + 1,
          totalSongs: room.songs.length,
        });

        // ◊ê◊ù ◊î◊ò◊ô◊ô◊û◊® ◊õ◊ë◊® ◊§◊ï◊¢◊ú, ◊©◊ú◊ó ◊í◊ù timerStarted
        if (room.roundDeadline && room.roundDeadline > Date.now()) {
          const msLeft = room.roundDeadline - Date.now();
          socket.emit("timerStarted", {
            roundDeadline: room.roundDeadline,
            guessTimeLimit: room.game.guessTimeLimit,
          });
          console.log(
            `‚è∞ Synced timer for ${username}, ${Math.ceil(msLeft / 1000)}s left`
          );
        }
      }
    }
  });
};
